{"version":3,"sources":["trivia.png","components/Header.js","redux/actions/index.js","pages/Feedback.js","components/Questions.js","components/Timer.js","pages/Game.js","services/tokenAPI.js","pages/Login.js","pages/Ranking.js","pages/Settings.js","App.js","redux/reducers/login.js","redux/reducers/game.js","redux/reducers/player.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["module","exports","Header","this","props","playerName","playerScore","playerEmail","console","log","className","data-testid","src","md5","toString","alt","React","Component","defaultProps","connect","store","login","player","score","showTimer","payload","type","timeOver","actionReciveButton","Feedback","playAgainClick","history","resetScore","resetAssertions","push","rankingButtonClick","totalPoints","getScore","to","logo","onClick","assertions","dispatch","Question","alternate","element","correct","question","correct_answer","index","length","classList","innerText","add","validationAnswer","target","timer","sumScoreAction","sumPoints","id","difficulty","handleClick","reciveButton","timeOverAction","buttons","document","querySelectorAll","randomArray","timeIsOver","wrongAnswerIndex","category","map","answer","key","disabled","game","showButton","sumScore","sumTotalPointsAction","Timer","timeToAnswer","showTimerAction","setInterval","maxTimer","Game","componentDidMount","fetchAPI","localStorage","getItem","saveInLocalStorage","ranking","persson","name","picture","setItem","JSON","stringify","ricoverRankingAtLocalStorage","parse","onClickChange","indexQuestions","state","setState","prevState","removeClass","answers","getElementsByClassName","i","questions","requestAPI","requestState","endPoint","a","fetch","resolve","json","data","obj","results","response_code","incorrect_answers","sort","Math","random","requestQuestions","getToken","response","Login","handleInputChange","value","isButtonDisabled","test","sendPlayerInfoToStore","require","token","htmlFor","placeholder","onChange","playerInfoToStore","Ranking","goHomeButton","b","position","Settings","App","path","exact","component","INITIAL_STATE","action","rootReducer","combineReducers","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.37a4d00a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","import md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nclass Header extends React.Component {\n  // componentDidMount = () => {\n  //   this.sendToStorage();\n  // }\n\n  // sendToStorage = () => {\n  //   const { playerName, playerScore, playerEmail } = this.props;\n  //   localStorage.setItem('PlayerName', playerName);\n  //   localStorage.setItem('PlayerScore', playerScore);\n  //   localStorage.setItem('PlayerEmail', playerEmail);\n  // }\n\n  render() {\n    const { playerName, playerScore, playerEmail } = this.props;\n    console.log(playerScore);\n    return (\n      <header>\n        <img\n          className=\"icon-header\"\n          data-testid=\"header-profile-picture\"\n          src={ `https://www.gravatar.com/avatar/${md5(playerEmail).toString()}` }\n          alt=\"ProfileAVATAR\"\n        />\n        <p data-testid=\"header-player-name\">\n          Player:\n          {' '}\n          { playerName }\n        </p>\n        <p>\n          Score:\n          {' '}\n          <span data-testid=\"header-score\">\n            { `${playerScore}` }\n          </span>\n        </p>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  playerName: PropTypes.string.isRequired,\n  playerScore: PropTypes.number,\n  playerEmail: PropTypes.string.isRequired,\n};\n\nHeader.defaultProps = {\n  playerScore: 0,\n};\n\nconst mapStateToProps = (store) => ({\n  playerName: store.login.playerName,\n  // playerScore: store.game.player.score,\n  playerScore: store.player.score,\n  playerEmail: store.login.playerEmail,\n});\n\nexport default connect(mapStateToProps)(Header);\n","export const REQUEST_API = 'REQUEST_API';\nexport const REQUEST_SUCSSES = 'REQUEST_SUCSSES';\nexport const REQUEST_ERROR = 'REQUEST_ERROR';\nconst randomNumber = 0.5;\n\nconst receiveTokenSuccess = (token) => ({\n  type: 'RECEIVE_TOKEN_SUCCESS',\n  token,\n});\n\nconst requestAPI = () => ({\n  type: REQUEST_API,\n});\n\nconst requestSuccess = (obj) => ({\n  type: REQUEST_SUCSSES,\n  questions: obj.results,\n  requestState: obj.response_code,\n  randomArray: obj.results.map((question) => [\n    question.correct_answer,\n    ...question.incorrect_answers].sort(() => Math.random() - randomNumber)),\n});\n\nconst requestError = () => ({\n  type: REQUEST_ERROR,\n});\n\nexport const requestQuestions = (endPoint) => async (dispatch) => {\n  dispatch(requestAPI());\n  try {\n    const resolve = await fetch(endPoint);\n    const data = await resolve.json();\n    dispatch(requestSuccess(data));\n  } catch (error) {\n    dispatch(requestError());\n  }\n};\n\nconst playerInfoToStore = (playerName, playerEmail) => ({\n  type: 'PLAYER_INFO_TO_STORE',\n  playerName,\n  playerEmail,\n});\n\nconst showTimer = (payload) => ({ type: 'SHOW_TIMER', payload });\n\nconst timeOver = (payload) => ({ type: 'TIME_OVER', payload });\n\nconst actionReciveButton = (payload) => ({ type: 'SHOW_BUTTON', payload });\n\nconst sumScore = (payload) => ({ type: 'SUM_SCORE', payload });\n\nconst sumTotalPoints = () => ({ type: 'SUM_TOTAL_POINTS' });\n\nconst resetScoreAction = () => ({ type: 'RESET_SCORE' });\n\nconst resetAssertionsAction = () => ({ type: 'RESET_ASSERTIONS' });\n\nexport {\n  receiveTokenSuccess,\n  playerInfoToStore,\n  showTimer,\n  timeOver,\n  actionReciveButton,\n  sumScore,\n  sumTotalPoints,\n  resetScoreAction,\n  resetAssertionsAction,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Header from '../components/Header';\nimport { resetAssertionsAction, resetScoreAction } from '../redux/actions';\nimport logo from '../trivia.png';\n\n// menssageScore = () => {\n//   const { getScore } = this.props;\n//   const number = 3;\n//   if (getScore < number) {\n//     return 'Could be better...';\n//   }\n//   if (getScore >= number) {\n//     return 'Well Done!';\n//   }\n// };\n\n// handleClick = () => {\n//   const { history } = this.props;\n//   history.push('/Ranking');\n// };\n\nclass Feedback extends React.Component {\n  playAgainClick = () => {\n    const { history, resetScore, resetAssertions } = this.props;\n    resetScore();\n    resetAssertions();\n    history.push('/Projeto-Trivia');\n  }\n\n  rankingButtonClick = () => {\n    const { history, resetScore, resetAssertions } = this.props;\n    resetScore();\n    resetAssertions();\n    history.push('/ranking');\n  }\n\n  render() {\n    const { totalPoints, getScore } = this.props;\n    const MIN_POINTS = 3;\n    return (\n      <div>\n        <Header />\n        <header className=\"App-header\">\n          <Link\n            to=\"/Projeto-Trivia\"\n          >\n            <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n          </Link>\n        </header>\n        { totalPoints < MIN_POINTS\n          ? (\n            <p data-testid=\"feedback-text\">Could be better...</p>)\n          : <p data-testid=\"feedback-text\">Well Done!</p>}\n        <p>\n          Score:\n          {' '}\n          <span data-testid=\"feedback-total-score\">\n            {getScore}\n          </span>\n        </p>\n        <p>\n          Hits:\n          {' '}\n          <span data-testid=\"feedback-total-question\">\n            {totalPoints}\n          </span>\n        </p>\n        <button\n          type=\"button\"\n          onClick={ this.playAgainClick }\n          data-testid=\"btn-play-again\"\n        >\n          Play Again\n        </button>\n        <button\n          type=\"button\"\n          data-testid=\"btn-ranking\"\n          onClick={ this.rankingButtonClick }\n        >\n          Ranking\n        </button>\n        {/* {this.menssageScore} */}\n        {/* <button\n          type=\"button\"\n          data-testid=\"btn-ranking\"\n          onClick={ this.handleClick }\n        >\n          Ranking\n        </button> */}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (store) => ({\n  getScore: store.player.score,\n  totalPoints: store.player.assertions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetScore: (score) => { dispatch(resetScoreAction(score)); },\n  resetAssertions: (assertions) => { dispatch(resetAssertionsAction(assertions)); },\n});\n\nFeedback.propTypes = {\n  totalPoints: PropTypes.number.isRequired,\n  getScore: PropTypes.number.isRequired,\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n  resetScore: PropTypes.func.isRequired,\n  resetAssertions: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { actionReciveButton, sumScore, sumTotalPoints, timeOver } from '../redux/actions';\n\nclass Question extends React.Component {\n  // handleAnswerSubmit = ({ target }) => {\n  //   const gotItRight = target.key === 'correct_answer';\n\n  // }\n\n  alternate = (element) => {\n    const { question: { correct_answer: correct } } = this.props;\n    for (let index = 0; index < element.length; index += 1) {\n      if (element[index].classList.length !== 0) {\n        if (element[index].innerText === correct) {\n          element[index].classList.add('question-correct');\n        } else {\n          element[index].classList.add('question-incorrect');\n        }\n      }\n    }\n  }\n\n  validationAnswer = (target) => {\n    const { question, timer, sumScoreAction, score, sumPoints } = this.props;\n    const MAGICNUMBER = 10;\n    const HARD = 3;\n    let subTotalScore = 0;\n    let totalScore = 0;\n    let assertions = 0;\n    if (target.id === 'correct-answer') {\n      if (question.difficulty === 'easy') {\n        assertions += 1;\n        subTotalScore = MAGICNUMBER + (timer * 1);\n        totalScore = subTotalScore + score;\n        sumScoreAction(totalScore);\n        sumPoints(assertions);\n        // console.log(subTotalScore);\n        // console.log(totalScore);\n      }\n      if (question.difficulty === 'medium') {\n        assertions += 1;\n        subTotalScore = MAGICNUMBER + (timer * 2);\n        totalScore = subTotalScore + score;\n        sumScoreAction(totalScore);\n        sumPoints(assertions);\n        // console.log(subTotalScore);\n        // console.log(totalScore);\n      }\n      if (question.difficulty === 'hard') {\n        assertions += 1;\n        subTotalScore = MAGICNUMBER + (timer * HARD);\n        totalScore = subTotalScore + score;\n        sumScoreAction(totalScore);\n        sumPoints(assertions);\n        // console.log(subTotalScore);\n        // console.log(totalScore);\n      }\n    }\n  }\n\n  handleClick = ({ target }) => {\n    const { question: { correct_answer: correct },\n      reciveButton, timeOverAction } = this.props;\n    if (target.innerText === correct) {\n      target.classList.add('question-correct');\n    } else {\n      target.classList.add('question-incorrect');\n    }\n    const buttons = document.querySelectorAll('.button');\n    this.alternate(buttons);\n    reciveButton(true);\n    this.validationAnswer(target);\n    timeOverAction(true);\n  }\n\n  render() {\n    const { question, randomArray, timeIsOver } = this.props;\n    let wrongAnswerIndex = 0;\n    return (\n      <>\n        <p data-testid=\"question-category\">\n          { question.category }\n        </p>\n        <p data-testid=\"question-text\">\n          { question.question }\n        </p>\n        <div data-testid=\"answer-options\">\n          {randomArray.map((answer) => {\n            if (answer === question.correct_answer) {\n              return (\n                <button\n                  data-testid=\"correct-answer\"\n                  id=\"correct-answer\"\n                  type=\"button\"\n                  key=\"correct_answer\"\n                  className=\"button\"\n                  onClick={ this.handleClick }\n                  disabled={ timeIsOver }\n                >\n                  {answer}\n                </button>);\n            }\n            wrongAnswerIndex += 1;\n            return (\n              <button\n                data-testid={ `wrong-answer-${wrongAnswerIndex - 1}` }\n                id=\"incorrect-answer\"\n                type=\"button\"\n                key={ wrongAnswerIndex }\n                className=\"button\"\n                onClick={ this.handleClick }\n                disabled={ timeIsOver }\n              >\n                {answer}\n              </button>);\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nQuestion.propTypes = {\n  question: PropTypes.objectOf(PropTypes.any).isRequired,\n  randomArray: PropTypes.arrayOf(PropTypes.any).isRequired,\n  timeIsOver: PropTypes.bool.isRequired,\n  score: PropTypes.number,\n  timer: PropTypes.number.isRequired,\n  sumScoreAction: PropTypes.func.isRequired,\n  reciveButton: PropTypes.func.isRequired,\n  // sumTotalPointsAction: PropTypes.func.isRequired,\n  timeOverAction: PropTypes.func.isRequired,\n  sumPoints: PropTypes.func.isRequired,\n};\n\nQuestion.defaultProps = {\n  score: 0,\n};\n\nconst mapStateToProps = (store) => ({\n  timeIsOver: store.game.timeOver,\n  showButton: store.game.showButton,\n  score: store.player.score,\n  timer: store.game.timer,\n  // score: store.game.player.score,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  reciveButton: (payload) => dispatch(actionReciveButton(payload)),\n  sumScoreAction: (payload) => dispatch(sumScore(payload)),\n  sumTotalPointsAction: () => dispatch(sumTotalPoints()),\n  timeOverAction: (payload) => dispatch(timeOver(payload)),\n  sumPoints: () => dispatch(sumTotalPoints()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Question);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { actionReciveButton, showTimer, timeOver } from '../redux/actions';\n\nclass Timer extends React.Component {\n  componentDidMount() {\n    this.timeToAnswer();\n  }\n\n  timeToAnswer = () => {\n    const { showTimerAction, timeOverAction, reciveButton } = this.props;\n    const TIMEINTERVAL = 1000;\n    setInterval(() => {\n      const { timer } = this.props;\n      let maxTimer = timer;\n      if (maxTimer > 0) {\n        maxTimer -= 1;\n        showTimerAction(maxTimer);\n      } else if (maxTimer === 0) {\n        timeOverAction(true);\n        showTimerAction(0);\n        reciveButton(true);\n      }\n    }, TIMEINTERVAL);\n  }\n\n  render() {\n    const { timer } = this.props;\n    return (\n      <p className=\"timer\">\n        Timer:\n        {' '}\n        { timer }\n      </p>\n    );\n  }\n}\n\nTimer.propTypes = {\n  timer: PropTypes.number.isRequired,\n  showTimerAction: PropTypes.func.isRequired,\n  timeOverAction: PropTypes.func.isRequired,\n  reciveButton: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  showTimerAction: (payload) => dispatch(showTimer(payload)),\n  timeOverAction: (payload) => dispatch(timeOver(payload)),\n  reciveButton: (payload) => dispatch(actionReciveButton(payload)),\n});\n\nconst mapStateToProps = (store) => ({\n  timer: store.game.timer,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport Header from '../components/Header';\nimport Question from '../components/Questions';\nimport Timer from '../components/Timer';\nimport {\n  actionReciveButton,\n  requestQuestions, showTimer, timeOver,\n} from '../redux/actions';\nimport logo from '../trivia.png';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = { indexQuestions: 0 };\n  }\n\n  componentDidMount = () => {\n    const { fetchAPI } = this.props;\n    fetchAPI(\n      `https://opentdb.com/api.php?amount=5&token=${localStorage.getItem(\n        'token',\n      )}`,\n    );\n  };\n\n  saveInLocalStorage = () => {\n    const { player, login } = this.props;\n    const ranking = localStorage.getItem('ranking');\n    const persson = {\n      name: login.playerName,\n      score: player.score,\n      picture: login.playerEmail,\n    };\n    if (ranking === null) {\n      localStorage.setItem('ranking', JSON.stringify([persson]));\n    } else {\n      const ricoverRankingAtLocalStorage = JSON.parse([ranking]);\n      console.log(ricoverRankingAtLocalStorage);\n      ricoverRankingAtLocalStorage.push(persson);\n      localStorage.setItem('ranking', JSON.stringify(ricoverRankingAtLocalStorage));\n    }\n  }\n\n  onClickChange = () => {\n    const { history, showTimerAction, timeOverAction, reciveButton } = this.props;\n    const { indexQuestions } = this.state;\n    const numberIndex = 4;\n    const MAGICNUMBER = 30;\n    this.setState((prevState) => ({\n      indexQuestions: prevState.indexQuestions + 1,\n    }));\n    if (indexQuestions === numberIndex) {\n      this.saveInLocalStorage();\n      history.push('/feedback');\n    }\n    showTimerAction(MAGICNUMBER);\n    timeOverAction(false);\n    reciveButton(false);\n    this.removeClass();\n  }\n\n  removeClass = () => {\n    const answers = document.getElementsByClassName('button');\n    for (let i = answers.length - 1; i >= 0; i -= 1) {\n      answers[i].className = 'button';\n    }\n  }\n\n  render() {\n    const { indexQuestions } = this.state;\n    const { questions, requestAPI, requestState, randomArray, showButton } = this.props;\n    const requestFailed = 3;\n    if (requestState === requestFailed) {\n      return <Redirect to=\"/\" />;\n    }\n    return (\n      <>\n        <Header />\n        <header className=\"App-header\">\n          <Link\n            to=\"/Projeto-Trivia\"\n          >\n            <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n          </Link>\n        </header>\n        <div className=\"div-game\">\n          <Timer />\n          {!requestAPI && (\n            <Question\n              question={ questions[indexQuestions] }\n              randomArray={ randomArray[indexQuestions] }\n            />\n          )}\n          { showButton ? (\n            <button\n              id=\"buttonNext\"\n              type=\"button\"\n              data-testid=\"btn-next\"\n              onClick={ this.onClickChange }\n            >\n              Next\n            </button>\n          ) : ('')}\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchAPI: (endPoint) => dispatch(requestQuestions(endPoint)),\n  reciveButton: (payload) => dispatch(actionReciveButton(payload)),\n  showTimerAction: (payload) => dispatch(showTimer(payload)),\n  timeOverAction: (payload) => dispatch(timeOver(payload)),\n});\n\nconst mapStateToProps = (store) => ({\n  questions: store.game.questions,\n  requestAPI: store.game.requestAPI,\n  requestState: store.game.requestState,\n  randomArray: store.game.randomArray,\n  showButton: store.game.showButton,\n  player: store.player,\n  login: store.login,\n});\n\nGame.propTypes = {\n  requestState: PropTypes.number,\n  questions: PropTypes.arrayOf(PropTypes.object),\n  fetchAPI: PropTypes.func.isRequired,\n  requestAPI: PropTypes.bool,\n  randomArray: PropTypes.arrayOf(PropTypes.any),\n  showButton: PropTypes.bool.isRequired,\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n  showTimerAction: PropTypes.func.isRequired,\n  timeOverAction: PropTypes.func.isRequired,\n  reciveButton: PropTypes.func.isRequired,\n  player: PropTypes.objectOf(PropTypes.any).isRequired,\n  login: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nGame.defaultProps = {\n  questions: [],\n  requestAPI: true,\n  requestState: 0,\n  randomArray: [],\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","const TOKEN_URL = 'https://opentdb.com/api_token.php?command=request';\n\nconst getToken = async () => {\n  const response = await fetch(TOKEN_URL);\n  const data = await response.json();\n  return data;\n};\n\nexport default getToken;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { playerInfoToStore } from '../redux/actions';\nimport getToken from '../services/tokenAPI';\nimport logo from '../trivia.png';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      playerName: '',\n      playerEmail: '',\n      isButtonDisabled: true,\n    };\n  }\n\n  handleInputChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    }, () => {\n      const { playerName, playerEmail } = this.state;\n      const regex = /\\S+@\\S+\\.\\S+/;\n      this.setState({\n        isButtonDisabled: playerName.length === 0 || !regex.test(playerEmail),\n      });\n    });\n  }\n\n  handleClick = async () => {\n    const { history, sendPlayerInfoToStore } = this.props;\n    const { playerName, playerEmail } = this.state;\n    const require = await getToken();\n    const { token } = require;\n    sendPlayerInfoToStore(playerName, playerEmail);\n    await localStorage.setItem('token', token);\n    history.push('/game');\n  }\n\n  render() {\n    const { playerName, playerEmail, isButtonDisabled } = this.state;\n    const { history } = this.props;\n    return (\n      <>\n        <header className=\"App-header\">\n          <Link\n            to=\"/Projeto-Trivia\"\n          >\n            <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n          </Link>\n        </header>\n        <form>\n          <h1>Login</h1>\n          <label htmlFor=\"input-player-name\">\n            Jogador:\n            <input\n              type=\"text\"\n              data-testid=\"input-player-name\"\n              id=\"input-player-name\"\n              name=\"playerName\"\n              placeholder=\"Insira o nome do jogador\"\n              onChange={ this.handleInputChange }\n              value={ playerName }\n            />\n          </label>\n          <label htmlFor=\"input-gravatar-email\">\n            E-mail:\n            <input\n              type=\"email\"\n              data-testid=\"input-gravatar-email\"\n              id=\"input-gravatar-email\"\n              name=\"playerEmail\"\n              placeholder=\"Insira o e-mail do jogador\"\n              onChange={ this.handleInputChange }\n              value={ playerEmail }\n            />\n          </label>\n          <button\n            type=\"button\"\n            data-testid=\"btn-play\"\n            disabled={ isButtonDisabled }\n            onClick={ this.handleClick }\n          >\n            Play\n          </button>\n        </form>\n        <button\n          type=\"button\"\n          className=\"cfg-button\"\n          data-testid=\"btn-settings\"\n          onClick={ () => { history.push('/settings'); } }\n        >\n          Configurações\n        </button>\n      </>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n  sendPlayerInfoToStore: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendPlayerInfoToStore: (playerName, playerEmail) => (\n    dispatch(playerInfoToStore(playerName, playerEmail))),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport logo from '../trivia.png';\n\nclass Ranking extends React.Component {\n  goHomeButton = () => {\n    const { history } = this.props;\n    history.push('/Projeto-Trivia');\n  }\n\n  render() {\n    const ranking = JSON.parse(localStorage.getItem('ranking'))\n      .sort((a, b) => b.score - a.score);\n    console.log(ranking);\n    return (\n      <div>\n        <header className=\"App-header\">\n          <Link\n            to=\"/Projeto-Trivia\"\n          >\n            <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n          </Link>\n        </header>\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        {\n          ranking.map((position, index) => (\n            <div key={ index } className=\"div-ranking\">\n              <img\n                src={ `https://www.gravatar.com/avatar/${md5(position.picture).toString()}` }\n                alt=\"GravatarImage\"\n              />\n              <p data-testid={ `player-name-${index}` }>{position.name}</p>\n              <p data-testid={ `player-score-${index}` }>{position.score}</p>\n            </div>\n          ))\n        }\n\n        <button\n          type=\"button\"\n          id=\"go-home-rank\"\n          data-testid=\"btn-go-home\"\n          onClick={ this.goHomeButton }\n        >\n          Go Home!\n        </button>\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default Ranking;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport logo from '../trivia.png';\n\nclass Settings extends React.Component {\n  render() {\n    return (\n      <>\n        <header className=\"App-header\">\n          <Link\n            to=\"/Projeto-Trivia\"\n          >\n            <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n          </Link>\n        </header>\n        <h1 data-testid=\"settings-title\">Configurações:</h1>\n      </>\n    );\n  }\n}\n\nexport default Settings;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Feedback from './pages/Feedback';\nimport Game from './pages/Game';\nimport Login from './pages/Login';\nimport Ranking from './pages/Ranking';\nimport Settings from './pages/Settings';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/Projeto-Trivia\" exact component={ Login } />\n        <Route path=\"/game\" component={ Game } />\n        <Route path=\"/settings\" component={ Settings } />\n        <Route path=\"/feedback\" component={ Feedback } />\n        <Route path=\"/ranking\" component={ Ranking } />\n      </Switch>\n    </div>\n  );\n}\n","const INITIAL_STATE = {\n  token: '',\n  playerName: '',\n  playerEmail: '',\n};\n\nconst login = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'RECEIVE_TOKEN_SUCCESS':\n    return {\n      ...state,\n      token: action.token,\n    };\n  case 'PLAYER_INFO_TO_STORE':\n    return {\n      ...state,\n      playerName: action.playerName,\n      playerEmail: action.playerEmail,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default login;\n","import { REQUEST_API, REQUEST_SUCSSES } from '../actions';\n\nconst INITIAL_STATE = {\n  player: {\n    score: 0,\n  },\n  timer: 30,\n  timeOver: false,\n  showButton: false,\n};\n\nconst game = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case REQUEST_API:\n    return { ...state, requestAPI: true };\n  case REQUEST_SUCSSES:\n    return { ...state,\n      questions: action.questions,\n      player: { score: 0 },\n      randomArray: action.randomArray,\n      requestAPI: false,\n      requestState: action.requestState,\n    };\n  case 'SHOW_TIMER':\n    return {\n      ...state, timer: action.payload,\n    };\n  case 'TIME_OVER':\n    return {\n      ...state, timeOver: action.payload,\n    };\n\n  case 'SHOW_BUTTON':\n    return {\n      ...state, showButton: action.payload,\n    };\n  // case 'SUM_SCORE':\n  //   return {\n  //     ...state, player: { score: action.payload },\n  //   };\n  default:\n    return state;\n  }\n};\n\nexport default game;\n","const INITIAL_STATE = {\n  score: 0,\n  assertions: 0,\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'SUM_SCORE':\n    return {\n      ...state, score: action.payload,\n    };\n  case 'SUM_TOTAL_POINTS':\n    return {\n      ...state,\n      assertions: state.assertions + 1,\n    };\n  case 'RESET_SCORE':\n    return {\n      ...state, score: 0,\n    };\n  case 'RESET_ASSERTIONS':\n    return {\n      ...state, assertions: 0,\n    };\n  default:\n    return {\n      ...state,\n    };\n  }\n};\n\nexport default player;\n","import { combineReducers } from 'redux';\nimport login from './login';\nimport game from './game';\nimport player from './player';\n\nconst rootReducer = combineReducers({\n  login,\n  game,\n  player,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\nif (window.Cypress) {\n  window.store = store;\n}\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}